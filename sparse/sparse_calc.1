.TH sparse_calc 1 2013-04-06
.SH NAME
sparse_calc -- The sparse matrix calculator.
.SH SYNOPSIS
.HP
sparse_calc [-d] [-p path] [-h] [-A nA] [-v nev] [-t tol] [-I maxiter]
[-L histfile] [-e script]
.SH DESCRIPTION
The sparse calculator, 
.B "sparse_calc", 
is an interactive utility for
performing calculations with sparse matrices, much as you might make 
calculations with integers or floating point numbers on a pocket calculater.
.SH OPTIONS
.SS -d
Debug mode--turns on yacc debug option.
.SS -p path
Sets data path to path.  All data files, the names of which correspond to
variables other than scalar variables, are stored here.
.SS -h
Display help screen.
.SS -A nA
Sets the variable, 
.I "NARNOLDI"
, to nA.  This variable is used to set the
number of Arnoldi vectors used in ARPACK operations.
.SS -v nev
Sets the variable, 
.I NEV
, to nev.  This variable determines the number of
eigenvalues and/or eigenvectors returned in eigenvalue calculation operations.
.SS -t tol
Sets the variables, 
.I TOL
, to tol.  This variable sets the tolerance for
convergence in iterative solution methods.
.SS -I maxiter
Sets the variable, 
.I MAXNITER
, to maxiter.  This variable determines the
maximum number of iterations in iterative solution methods.
.SS -L histfile
Loads history file, histfile.  The history can be printed using the print
command.
.SS -e script
Executes script before start-up.
.SH STATEMENTS
Statements are separated by line-breaks.
The sparse matrix calculator accepts statements of the following type:
.SS VARIABLE DECLARATION
<type> <name>
.P
Declares <name> as a variable of type <type>.  Type can be one of:
sparse, sparse_array, full or vector.  <name> must correspond to a binary
data file contained in the current data path and may contain alpha-numeric
characters, underscores and periods.  Variable names must start with a
letter.
.SS ASSIGNMENT
<lvalue>=<expression>
.P
Assigns an arithmetic expression to an l-value.  
Expressions are comprised of operators,
variable names, functions and scalar constants.  An l-value is either a
variable name or a subscripted variable name.  Variables may subscripted with
scalars or vectors.  Subscripts and the right-hand-side must agree in size
and type.  Variables need not be defined to be assigned to and any new 
assignment clobbers the old definition.
.SS COMMAND
<command> ["<options>"] [<expression>]
Executes <command>.  <command> may or may not accept an argument in the form
of another command, an arithmetic expression or a string literal and may also
accept options contained in a string literal.
.SH RESERVED WORDS
The following is a list of reserved words which cannot be used as variable names.
Only alphanumeric characters, underscores and periods (full-stop) can be
used in variable names.  Variable names must start with a letter.
.SS COMMANDS
com delete help path print run sys
.SS TYPES
sparse sparse_array full vector
.SS FUNCTIONS
empty evd identity invert read size solve svd transpose
.SS OPERATORS
( ) | : [ ] * # / + -
.SH CONSTANTS
There are two types of constants in sparse_calc: scalars and string literals.
Scalars are currently in the form of floating-point reals and are written
in the form of standard floating point notation.
A string literal is a series of characters enclosed by quotation marks.
String literals are used to pass options and arguments to commands and functions.
.SH DATA TYPES
There are five different data types in sparse_calc: sparse, sparse_array,
full, vector and scalar.  Except for scalar, all the type names correspond
to declaration commands, type conversion functions and "short-cut" declarations.
Except for the scalar type, which is stored in RAM, all other types are 
stored in binary files with the same name as the variable.
.SS sparse
This type name corresponds to a generalized sparse matrix representation.
It comprises a series of records, one for each non-zero element.  Each
record has three fields: two integer fields for row and column, respectively,
and a scalar data field containing the value of the element.  The records
are sorted by row first and column second.  The file format is consists
of two four-byte headers giving the dimensions of the matrix, another
four- or eight-byte header giving the number of elements and then the ordered
records.
.SS sparse_array
This type name corresponds to an array of sparse matrices.  Particularly for
very large matrices, if we have to multiply a series of sparse matrices
and the number is considerably smaller than the matrix dimension, it is
usually more efficient both storage-wise and time performance-wise 
.I not
to multiply them through.  This type is limited to square matrices.
Storage format is simply one sparse matrix after another in the order that
they must be multiplied.  To access elements of a sparse array, use round
brackets--see the section on operators.
.SS full
This type name corresponds to the more usual "full" matrix representation.
Files are very simple and comprise a four-byte header with the number of
columns and then a straight, binary dump of the data stored in row-major order.
The same storage format is used in the 
.B libagf 
and 
.B ctraj 
libraries, the files having .vec as the extension.
.SS vector
This type name corresponds to a vector type.  Storage for vectors is a
straight, binary dump of the data.  This file format is also used in
.B libagf,
usually with a .dat extension.
.SS scalar
Scalar data is the type used for data elements in vectors and matrices.
Currently, this corresponds to single precision floating point,
however the program could be recompiled to accept double-precision data with
only a few modifications.  Since many matrix operations, such as taking the
square root or eigenvalue decomposition of a non-symmetric matrix, generate
complex output, we hope to expand the package to use complex data as standard.
The term "scalar" does not correspond to a reserved word.
.SH VARIABLES
Variables may be declared by writing the type name followed by the variable
name, e.g.:
.P
sparse mat.dat
.P
Variable names correspond to a file contained in the data path and must be
composed of alphanumeric characters, underscores and periods.  They must 
start with letter.  The data path, which is specified using the
.B path
command or using the -p switch on the command line, is used to store all
non-scalar data types in the form of binary files.  The default data path
is the current directory (./).
.P
Variables should only be pre-declared when there is a pre-existing data
file output, for example, from another program
or that has been generated from a previous session.  For example, the tracer
simulation in the
.B ctraj
library outputs arrays of sparse matrices.  Also, the Gaspard-Rice simulator,
.B gr_scat
can output a sparse matrix representing a discretization of the Laplace
or Helmholtz equation which models the wave scattering behaviour of
the system.  
.P
Sparse matrics can be used to model a large class of partial
differential equations.  In the past, the process of matrix multiplication
would be coded directly in Fortran.  A similar method is used to compute
the tangent model for generating singular vectors from numerical weather models.
Each time a matrix multiplication is desired, to be fed back to the ARPACK
subroutines, the model is re-run from scratch.
Porting them to a data structure instead is not only faster, 
it is far more versatile.  Since the matrix is typically quite sparse, 
the extra storage is not particularly burdensome.
.P
Since scalar variables are stored in RAM, there is no need to predeclare them,
just assign to them, e.g.:
.P
NEV=10
.P
Type conversion between different types of matrices, and
from vectors to matrices is supported, e.g.:
.P
sparse smat
.br
fmat=full(smat)
.P
Since conversion from a matrix to a vector is ambiguous and from a vector
or a matrix to a scalar, these are not supported.  Conversion from a scalar
to a vector or matrix is also not supported since this can be done just as
easily with the addition operator.
.SS SHORTCUT DECLARATION
Shortcut declarations simultaneously declare a variable and read and return
it from the data file to be used in an arithmetic operation.
Shortcut declarations work just the same as type conversions except the single
operand is an undeclared variable name, e.g.:
.P
fmattimes2=full(2*sparse(smat))
.P
Once again, the shortcut declaration is not needed for the scalar type.
.SS SPECIAL VARIABLES
Most solution methods require a series of parameters which must be tuned for
best operation.  Different solution methods require different parameters,
therefore, rather than being passed directly to the solver, 
.B sparse_calc
searches for them in specific variables.  These variables can be read and
written to just like any other variable, however if they are needed by the
system and they have been set, their current value will be taken for the
prescriped use.  Most can be set at start-up using command-line options.
.IP ERR
This variable returns the final error for iterative solution algorithms.
.IP EVAL
Returned eigenvalues from an eigenvalue calculation routine (
.B svd
or
.B evd
).
.IP MAXNITER
This variable determines the maximum number of iterations in iterative solution
algorithms.  Can be set at start-up with the -I option.
.IP NEV
This variable determines the number of eigenvalues/eigenvectors to return
for eigenvalue algorithms.  Can be set at start-up with the -v option.
.IP NARNOLDI
This variable determines the number of Arnoldi vectors to to use in 
eigenvalue algorithms that use the Arnoldi method.  
Can be set at start-up with the -A option.
.IP TOL
This variable determines the tolerance for iterative solution algorithms.
Can be set at start-up with the -t option.
.IP CONDITIONER
Can be used to store a conditioning matrix for solution methods that need one.
.IP X0
Initial estimate for iterative solvers such as conjugate gradient and
bi-conjugate gradient.
.SH COMMANDS
Commands are used for fairly high-level operations such as accessing the
operating system, setting the data path, getting help or printing out a
result in human-readable form.  They are always at the beginning of a statement:
.P
<command> ["<options>"] [<expression>]
.P
where <expression> may be an arithmetic expression, a string literal,
or a reserved word.  Sparse calculator accepts the following commands:
.SS com ["<comment>"]
Comment string.
.SS delete "<variable>"
Deletes <variable> so that it may be redeclared.  Does nothing to the 
corresponding data file.
.SS help <expression>
Get help.  Here, <expression> can be an arithmetic expression, a string literal or a 
reserved word.  Basicly, any element of the language listed in this document
is fair game and will probably be contained in the help database.
.SS path ["<pathname>"]
Sets the data path to <pathname>.  When used without arguments, prints out the
current data path.  All vector and matrix variables are stored as binary files 
in this directory.  The names of the files are the same as the variable names.
When the data path is changed, all vector and matrix variable names along
with corresponding type information are stored in a file with the following
name:
.P
sc.vars.<id>.sc
.P
where <id> is a unique session id.  The variables are then deleted from the
symbol table.  After switching to a new data path, sparse_calc will look for
file with the same name, i.e., the same session id.  If it finds one, then it
will execute it, i.e., restoring all the variables from the old data path to
the symbol table.
.P
Since sparse_calc currently doesn't do any file clean-up on exit (it leaves
all old data files and stored symbol tables) the data path for most sessions
should probably be a dedicated directory which can be more easily cleaned up.
.P
The default data path is the current directory.  The data path can also be
set on start-up with -p option.
.SS print ["<filename>"] <expression>
Prints out an arithmetic expression to <filename> if present or to
.B stdout
otherwise.  Can also be used to print out or store the current system state:
.P
print ["<filename>"] "history"
.P
prints out the command history.  If printed to a file, it can be restored
using the -H option on start-up.  Likewise,
.P
print ["<filename>"] "vars"
.P
prints out all the variable names and their corresponding types in a form
readable as variable declarations, i.e., use 
.B run
to redeclare them, i.e., to restore a previous session.
.SS run "<script>"
Runs the commands contained in the file, <script>.  
Notice that his can be used to re-run or
restore previous sessions that have been saved using the 
.P print
command.
.SS sys "<command>"
Access the operating system: executes <command> under the shell (sh).
.SH OPERATORS
.SS "multiplication * #"
There are two operators for generalized or inner product multiplication.
The standard, * (asterisk), is used to multiply a matrix with another matrix,
a matrix with a vector (or vice versa), a scalar with a vector or matrix
(or vice versa) or a scalar with another scalar.  A full matrix multiplied
with another matrix always returns a full matrix.  A sparse matrix multiplied
with another sparse matrix returns either a sparse array (if both are square
and the same size) or a another sparse matrix.  A similar rule applies to
sparse arrays.  If a sparse array is multiplied with either a sparse matrix
or another sparse array and both are the same size, the a sparse array results.
Otherwise, a full matrix results.
.P
The other matrix operator, # (number sign), is used for 
.I cumulative
multiplication of a sparse array with a vector.  The result is always a full
matrix with the same number of rows as elements in the array and the same
number of columns as that of the sparse array (or the size of the vector.)
.SS "division /"
The division operator, / (forward slash), cannot be used with matrices.
For this, the
.B solve
or 
.B invert
functions should be used.
Currently, it can only be used with scalars.
.SS "addition +"
The addition operator, + (plus sign), can be used with and between all data types.
Note that adding a vector to a matrix adds the vector along the diagonal.
Adding anything to a full matrix or a sparse matrix returns a full matrix.
Adding a scalar to any matrix returns a full matrix.
Adding a sparse matrix to a sparse matrix returns a sparse matrix only if
the matrices are the same size.
.SS "negation or subtraction -"
The subtraction operator, - (hyphen or minus sign), either negates the 
following expression (as a unary operator) or adds the negated expression 
to the previous expression (as a binary operator).
In the previous case, it is equivalent to multiplying with minus one (-1),
in the latter, it is equivalent multiplying the second operand by minus
one, then adding the two.
.SS "range :"
The range operator, : (colon), returns a vector whose elements are the consecutive 
sequence between the scalar on the left side and the scalar on the right, 
inclusive.  For example:
.P
print 1:5
.P
prints out the numbers: 1 2 3 4 5.
.SS "norm |"
Enclosing an expression with a pair of upright brackets, ||,  returns the 
(Cartesian) norm of the expression.
.SS "assignment ="
The asignment operator, = (equals), assigns an expression to an l-value.
The size and type of the expression must equal the size and type of the
l-value.  If the l-value is a variable name and nothing else, then the new
value clobbers anything that might have existed previously.  Subscripting
brackets may also be used to form l-values, see below.
.SS "subscript []"
The subscript operator, [] (left and right square brackets) can be used in 
several ways.  In its most basic form, it can be used to access a single
element of a vector or matrix.  For example:
.P
print sparse(1:5)[3,3]
.br
print 1:5[2]
.P
prints out:
.br
3
.br
2.
.P
Subscripts can alsoe be used to assign to a vector or matrix, e.g.:
.P
sparse mat
.br
vector vec
.br
mat[3, 3]=3
.br
vec[2]=2
.P
Multiple elements may be accessed using vector subscripts.
Using a single subscript on a matrix returns a row or rows.
If a matrix has two vector subscripts, they must agree in size.  
Matrix subscripts are not accepted, nor can
row subscripts be used in l-values.
.SS "brackets ()"
Round brackets or parentheses overide the normal order of operator precedence.
Operators enclosed in brackets will be executed in advance of operators
just outside of the brackets, e.g.:
.P
print 1+2*3
.P
returns 7, whereas:
.P
print (1+2)*3
.P
returns 9.
.P
Parentheses are also used to return one or more elements of a sparse array
and they enclose the arguments of a function, see next section.
.SS "quotes ""
Quotes, ", enclose string literals which are used to set different options
in functions and to pass filenames to functions and commands.  They are
also used when a variable is meant to represent a name rather than the 
expression it represents--see the
.B delete
function.
.SS PRECEDENCE
The normal order of operations is followed: division and multiplication are
done before addition and subtraction.  Both subscripting an array and the
range operator have a still higher precedence.  Therefore:
.P
print 1:5*2
.P
is different from:
.P
print 1:(5*2)
.P
but the same as:
.P
print (1:5)*2
.P
Except for the unary minus (negation operator) parentheses have the highest
precedence since they are used to over-ride the normal order of operations.
Where applicable, associativity is always to the left.
.P
OPERATOR   PRECEDENCE  ASSOCIATIVITY
.br
()         2           left
.br
:          3           left
.br
[]         3           left
.br
*          4           left
.br
#          4           left
.br
/          4           left
.br
+          5           left
.br
-          5/1         left/-
.br
|          -           -
.br
=          -           -
.br
"          -           -
.SH FUNCTIONS
Functions return expressions by operating on one or more operands or 
.I arguments
which form a comma-separated list enclosed in parentheses.
.SS empty(<m> [,<n>])
Returns an "empty" (all zeros) vector or matrix of the specified size.
.SS evd(<matrix> [,<nev> [,"<which>"]])
Finds the eigenvalues and eigenvectors of <matrix> using the Arnoldi package
(ARPACK).  <nev> is the number of eigen-vectors/values to return.
If this argument is not present, reads the number from the NEV special variable.
The number of Arnoldi vectors is read from NARNOLDI, 
the maximum number of iterations from MAXNITER, and the tolerance from TOL.
<which> is which eigenvalues to calculate:
.br
- LM (default) largest in magnitude
.br
- SM smallest in magnitude
.br
- LA largest algebraicly
.br
- SA smallest algebraicly
.br
- BE takes half from either side of the spectrum
.SS full(<expression>)
Converts a vector or matrix to a full matrix or declares a full matrix
and returns it.  See the VARIABLES section for more details.
.SS identity(<m>, <n>)
Returns the identity matrix.
.SS invert(<matrix>, "<method>")
Inverts a matrix where <method> is one of: cg bcg evd svd.  See 
.B solve
below, for more details.  The inversion algorithm is crude and solves
for the columns of the identity matrix one-by-one.
(For evd and svd this is extremely poor: must be redone...)
.SS read(<type>, "<filename>")
Reads a vector or matrix in formatted ASCII from a filename.  If the vector
or matrix has been written using the 
.B print
command, then it can be read in using
.B read.
.SS sparse(<expression>)
Converts to a sparse matrix.  <expression> may be a vector, a matrix or
a currently undeclared variable name corresponding to a pre-existing file
contained in the current data directory.
.SS sparse_array(<expression>)
Converts to a array of sparse matrices.  <expression> may be a vector, a matrix or
a currently undeclared variable name corresponding to a pre-existing file
contained in the current data directory.
.SS solve(<matrix>, <vector>, "<method>")
Solves a matrix equation using <method>.  See the section SOLUTION METHODS
for details on the different solution methods.
.SS svd(<matrix> [,<nev> [, "<which>"]])
Finds <nev> eigenvalues and eigenvectors of a symmetric matrices using the
Arnoldi package (ARPACK).  The number of ARNOLDI vectors are set from
NARNOLDI,
the maximum number of iterations from MAXNITER, and the tolerance from TOL.
<which> is which eigenvalues to calculate:
.br
- LM (default) largest in magnitude
.br
- SM smallest in magnitude
.br
- LA largest algebraicly
.br
- SA smallest algebraicly
.br
- BE takes half from either side of the spectrum
.SS transpose(<matrix>)
Returns the transpose of <matrix>.
.SH SOLUTION METHODS
Most solution methods for a sparse matrices are iterative.
Use the following codes to set the methods in 
.B solve
and
.B invert.
Most methods accept parameters from some subset of the 
.I "special variables."
If the variable exists then it is used, otherwise a reasonable default is
substituted.
.SS cg
Conjugate gradient method.  Uses MAXNITER and TOL.  For the initial estimate,
uses X0 if it is set and the correct size and type, otherwise uses the solution
vector divided by the matrix diagonal.
.SS bcg
Bi-conjugate gradient method.  Accepts a conditioning matrix: uses MAXNITER, 
TOL and CONDITIONER.  If no conditioning matrix is found under CONDITIONER
or if CONDITIONER is the wrong size, uses the identity matrix.
May also use X0 if set--see above.
.SS evd
Eigenvalue decomposition.  Uses NEV and NARNOLDI.
.SS svd
Singular value decomposition.  Uses NEV and NARNOLDI.
.SS n:<method>
For 
.B solve:
applies the normal equation using one of the above methods.
.SH EXAMPLE
Using the 
.B ctraj
package, we can generate a series of sparse matrices which represent the
tracer dynamics for a given range of dates, say May 1, 2000 to May 5, 2000,
and a given vertical level, say 500 K.  First, we will need to download the
.B NetCDF
files containing
.I NCEP
temperature and wind data: air.2000.nc, uwnd.2000.nc, vwnd.2000.nc.
Next, extract the desired velocity data using the
.I nc2ds
command:
.P
nc2ds -i 2000/5/1 -f 2000/5/6 -T 500 vfield_n.ds
.br
nc2ds -- -i 2000/5/1 -f 2000/5/6 -T 500 vfield_s.ds
.P
Run the tracer model on this data:
.P
ctraj_tracer vfield_s.ds vfield_n.ds tracer.dat
.P
Now we can find the top 10 singular vectors of the tracer dynamics using
.I sparse_calc
and put them in a file called,
.I sv.vec:
.P
echo "sv.vec=svd(sparse_array(tracer.dat)*transpose(tracer.dat), 10)" \\
.br
| sparse_calc -A 50
.P
Finally, plot and display the first singular vector:
.P
plot_frame.sh 0 sv.vec sv0.ps
.br
gv sv0.ps
.P
Now lets say you want to do the same thing, but only for the first day's
worth of data:
.P
echo "sv_1day.vec=svd(sparse_array(tracer.dat(0:4))*transpose(tracer.dat(0:4)), 10)" \\
.br
| sparse_calc -A 50
.SH BUGS/MISSING FEATURES
Being version zero, the calculator is quite buggy.  The solve routines in
particular are quite unreliable.  Since there is no complex data type, the
eigenvalue routine for non-symmetric matrices doesn't work at all.  Do not
use.
.P
The calculator is also petty bare bones and lacks important features.  Here is
a grab bag of features we hope to add in later versions:
.P
- Complex data type.
.P
- Use double instead of single precision for all calculations
(double precision complex?).
.P
- Vector and matrix concatination operator.
.P
- Special functions such as sin, cos, exp, log, sqrt, etc.  Note that these
would be applied to scalars only since there are generalized versions for
matrices.  Note that the generalized versions would not be implemented since
they require solve or inverse routines of which there are many different types.
To get the generalized versions, the user would have to write them with macro
facility.  You might also want to apply such functions element-by-element.
Both of these points will be addressed below.
.P
- In MatLab, there are two types of multiplication operators: one for element-
by-element, scalar application, and another for the matrix generalization.
In the current implementation of sparse_calc, the scalar version is lacking.
Some of method to apply scalar functions and operators element-wise
to one or more matrices is needed.
.P
- If we can apply scalar operators to all matrix elements, then we should also
be able to apply a matrix operator to each element of a sparse matrix array. 
.P
- Even in its current iteration, sparse_calc has several redundant operators
--one can be defined in terms of another--it might be preferable if these
were simply implemented as macros.  One could imagine three means of 
applications of macros: as a procedure which doesn't return a value,
as a function which returns a value, and to apply to each element of a sparse
array.  It might also be nice to have variable syntax for calling the
macros (e.g. a macro can overload an operator), 
although implementing this is quite involved.  The proposed method
for implementing macros is as follows: the macro is simply written as a script
except special variables, e.g., $1, $2, etc., can be used for each argument.
The macro will be declared in the same way as a variable, i.e.,:
.P
macro <script>
.P
When the macro is called, the file is scanned and the special variables 
substituted for the calling arguments.  The resulting string is placed inside
a special pointer which is then parsed in the same way as command line input
or a script.
.P
- Finally, control structures.  At least as initially conceived, the tool
was not meant to be Turing-complete, although it's interesting how easily
Turing-completeness can be produced in relatively simple software tools.
From my reading, a necessary condition (although by no means sufficient) for
Turing-completeness is that a program does not always halt.  I'm not
convinced this tells the whole story, though.  If you take a language like
IDL, which has a rich set of array operators including element-by-element
comparison and element selection, even if you take out all the traditional
control structures--do, while, for, if-then-else and goto--I suspect the
language will, for all intents and purposes, still be Turing-complete, 
even though programs will always halt.
.P
I like the idea of element-by-element comparison, array element selection 
and similar mechanisms since these have more of a declarative feel rather than 
the strictly imperative nature of the above-mentioned, more traditional control
structures.  As such, control structures such as if-then and for are the last
things on my list, however that does not mean I will not add comparison
operators, array selection operators and similar control-type structures.
.SS NOTES
.IP -
All the files containing data for intermediate variables that are left lying
around are really, really annoying.
.IP -
Simple things like a cross-correlation matrix, don't seem possible (at least
I couldn't figure out how to do it...)
.IP -
Is there some way to generalize L-value operations?  At the moment, every
instance of assignment is a special case...
.SH AUTHOR
Peter Mills 
.P
Questions? Comments? 
.br
E-mail: petey@peteysoft.org

